"""
Django settings for vendr project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", None)

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = False

ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '192.168.0.17',
                 'api.zappme.xyz', 'notify.zappme.xyz',
                 'api.vendr.xyz', 'notify.vendr.xyz',
                 'api.vendoor.ca', 'notify.vendoor.ca']

# Application definition
BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'rest_framework.authtoken',
    'oauth2_provider',
    'corsheaders',
]

KANGAA_APPS = [
    'ksearch',
    'kproperty',
    'kuser',
    'autocomplete',
    'transaction',
    "payment",
]

INSTALLED_APPS = BASE_APPS + KANGAA_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #TODO: 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True    #TODO: Ignore CSRF.

ROOT_URLCONF = 'vendr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vendr.wsgi.application'

# Database
# Previous config engine: 'django.db.backends.postgresql_psycopg2'
# ** incase we need to swap back **.
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'vendr',
        'USER': 'dier',
        'PASSWORD': os.environ.get("DB_PASSWORD", None),
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Redis settings.
# We're using Redis as a pub-sub message broker to our Node.js instance.
REDIS_HOST = 'localhost'
REDIS_PORT = 9200

# Cache settings.
# Note, we'll be using Memcached here.
# Memcached uses LRU by default, which works (and makes sense) for our
# use case. Note, we'll also set the cache time-to-live to 30 minutes.
CACHE_HOST = 'localhost'
CACHE_PORT = '11214'
CACHE_TTL = (60) * 30
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '{}:{}'.format(CACHE_HOST, CACHE_PORT),
    }
}

# Elastic Search config.
ES_HOST = "localhost"
ES_PORT = "14000"
ES_CONFIG = {
    "host": ES_HOST,
    "port": ES_PORT
}

# Celery.
BROKER_URL = 'redis://{}:{}'.format(REDIS_HOST, REDIS_PORT)
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_TIME_LIMIT = 600
CELERY_RESULT_SERIALIZER = 'json'

# Authorized user model.
AUTH_USER_MODEL = 'kuser.KUser'

OAUTH2_PROVIDER = {
    'SCOPES': {
                'read': 'Read scope',
                'write': 'Write scope',
    }       
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'
}

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging config.
LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "debug-handler": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filename": "/var/log/django/debug.log",
            },
            "error-handler": {
                "level": "ERROR",
                "class": "logging.FileHandler",
                "filename": "/var/log/django/error.log",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["debug-handler", "error-handler"],
                "level": "DEBUG",
                "propogate": True,
            },
        },
}

# Two-Factor authentication.
MESSAGEBIRD_ACCESS_KEY = os.environ.get("MESSAGEBIRD_ACCESS_KEY", None)
MESSAGEBIRD_SENDER = '+14509905541'

# SMTP settings.
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'tallosan'
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", None)
EMAIL_VERIFICATION_ADDRESS = 'noreply@vendoor.ca'
EMAIL_USE_TLS = True

# Email settings.
PAYMENT_EMAIL = "andrew.tallos@mail.utoronto.ca"
PAYMENT_FUND_TOKEN = os.environ.get("PAYMENT_FUND_TOKEN", None)
PAYMENT_INSTITUTION_NUMBER = os.environ.get("PAYMENT_INSTITUTION_NUMBER", None)
PAYMENT_BRANCH_NUMBER = os.environ.get("PAYMENT_BRANCH_NUMBER", None)
PAYMENT_ACCOUNT_NUMBER = os.environ.get("PAYMENT_ACCOUNT_NUMBER", None)
PAYMENT_API_TOKEN = os.environ.get("PAYMENT_API_TOKEN", None)
PAYMENT_API_KEY = os.environ.get("PAYMENT_API_KEY", None)

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Base URL for hyperlinking resources, and BASE_API URL for use with
# a view's `request.path`.
VERSION  = 1
BASE_URL = 'https://api.vendoor.ca/v{}/'.format(VERSION)
BASE_WEB_URL = "https://www.vendoor.ca/"
BASE_API_URL = 'https://api.vendoor.ca'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL  = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

MEDIA_URL   = '/media/'
MEDIA_ROOT  = os.path.join(BASE_DIR, 'media/')

